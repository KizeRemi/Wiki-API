<?php

namespace WikiBundle\Repository;
use WikiBundle\Entity\Revision;

/**
 * PageRevisionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RevisionRepository extends \Doctrine\ORM\EntityRepository
{
	public function getLatestOnlineRevisionByPage($page){
		$query = $this  ->createQueryBuilder('r')
						->where('r.page = :page')
						->andWhere('r.status = 1')
					    ->orderBy('r.id', 'ASC')
					    ->setMaxResults(1)
					    ->setParameter('page', $page)
					    ->getQuery();
		return $query->getSingleResult();
	}

	public function hasAlreadyPendingRevisionByPage($page, $user){
		$query = $this  ->createQueryBuilder('r')
						->where('r.page = :page')
						->andWhere('r.status = 2')
						->andWhere('r.user = :user')
					    ->setParameters(['page' => $page, 'user' => $user])
					    ->getQuery();
		return $query->getOneOrNullResult();
	}

	public function searchRevisionsWithOffsetAndLimit($search, $offset, $limit){
        $query = $this->createQueryBuilder('r')
                      ->where("r.title LIKE :search")
                      ->orWhere("r.content LIKE :search")
                      ->andWhere('r.status = 1')
                      ->orderBy('r.id', 'ASC')
                      ->setParameter('search', '%'.$search.'%');
        if ($offset != "") {
            $query->setFirstResult($offset);
        }
        if ($limit != "") {
            $query->setMaxResults($limit);
        }
        return $query->getQuery()->getResult();
	}

	public function countRevisionsByPage($page){
		$query = $this->createQueryBuilder('r')
                        ->select('COUNT(r)')
                        ->where('r.page = :page')
                        ->setParameter('page', $page);
                        
        return $query->getQuery()->getSingleScalarResult();
	}

	public function getTopContributors(){
		$query = $this->createQueryBuilder('r')
                      ->select('u.id, u.username, COUNT(r.id) as nbr_revision')
                      ->innerJoin('r.user', 'u')
                      ->groupBy('r.user')
                      ->orderBy('nbr_revision', 'DESC')
                      ->setMaxResults(10);
        return $query->getQuery()->getArrayResult();
	}
}
